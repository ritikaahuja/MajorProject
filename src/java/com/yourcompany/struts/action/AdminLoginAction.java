/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.yourcompany.struts.form.AdminLoginForm;
import java.util.*;

/**
 * MyEclipse Struts
 * Creation date: 07-24-2008
 *
 * XDoclet definition:
 * @struts.action path="/AdminLogin" name="adminLoginForm" attribute="AdminLoginForm" input="/AdminLogin.jsp" scope="request" validate="true"
 */
public class AdminLoginAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) throws SQLException, ClassNotFoundException, IOException, InterruptedException {
		Vector vector=new Vector();
		String status="failure";
		String result="failure";
		String type="";
		AdminLoginForm AdminLoginForm = (AdminLoginForm) form;// TODO Auto-generated method stub
		String accNumber=AdminLoginForm.getAccountnumber();
		String password=AdminLoginForm.getPassword();
		String process=request.getParameter("process");
		//System.out.println("b4 injection loooooop......... "+process);

		HttpSession session=request.getSession();
		session.setAttribute("process", process);
		System.out.println(process);
		System.out.println("sssssssssssss"+password);

		vector.add(accNumber);
		vector.add(password);
		Process compile;
		WASP.CharacterLevel character=new WASP.CharacterLevel();
		if(process==null)
		{
			session.setAttribute("process","normal");
			DataBase.database data=new DataBase.database();

			System.out.println("normal   "  +(String)session.getAttribute("process"));

			 data.setTableName("login");

			result=data.check(accNumber, password);
    		System.out.println("result befor to redirect  "  +result);
		}
		else if(process.equals("positive"))
		{
            session.setAttribute("process", "positive");
	    	System.out.println("dsdsdssdsdsdsdsdssdssd");
	    	String file="C:\\WASP\\";


	    FileReader fr=new FileReader(file+"Metastring.java");
	    System.out.println("file reader" +password);
	    BufferedReader br=new BufferedReader(fr);
	    System.out.println("buffer reader");

	    String data="";
	    String s;
	    while((s=br.readLine())!=null)
	    {
	    	s=s.replace("xxx",accNumber);
	    	s=s.replace("zzz", password);
	    	data=data+"\n"+s;
	    	//System.out.println("correct classs   " +s);
	    }
	     System.out.println("classs "+data);
	     br.close();
	     FileWriter fw=new FileWriter(file+"Metastring.java");
	     fw.write(data);
	     fw.flush();
	     fw.close();

	    String JAVA_HOME = System.getProperty("java.home");
	 	String java_dir	= JAVA_HOME.substring(0,JAVA_HOME.lastIndexOf(File.separator));
	 	String compileCommand = java_dir+File.separator+"bin"+File.separator+"javac.exe ";
	 	String path="-d "+" "+file;
	 	String fullpath=file+"Metastring.java";
	 	System.out.println(compileCommand +" "+path+"\\"+" "+fullpath);

	 	compile = Runtime.getRuntime().exec(compileCommand +" "+path+"\\"+" "+fullpath);
	    System.out.println("comple class created");
	    Thread.sleep(5000);
	    WASP.PositiveTaint positive=new WASP.PositiveTaint();
	      positive.classcode();
	      positive.changeclass("sample.txt","Metastring");
	      String Accountnumber=positive.accnumber;
	      String pass=positive.password;
	      type=positive.typeofinjection;
			System.out.println("Type of injection  "+type);
			//session.setAttribute("typeofinje", type);
			request.setAttribute("typeofinje", type);
			//------
			character.calculate(vector);
			status=character.injection;
			type=character.typeofinjection;
			request.setAttribute("typeofinje", type);
			if(status.equals("sucess"))
		    {
		    	DataBase.database data1=new DataBase.database();
		    	// data.check();
		    	    	System.out.println("22222222222222222222");
		    	     	data1.setTableName("login");
		    	     result=data1.check(accNumber, password);
		    		System.out.println("result befor to redirect  "  +result);
		    }
			//-----
	      /*if(positive.result.equals("notinjected"))
	      {
	      DataBase.database database=new DataBase.database();
	      database.setTableName("login");
	      result=database.check(Accountnumber, pass);
	      }
	      else if(positive.result.equals("injected"))
	      {
	    	result="failure" ;
	      }*/


	}

		else if(process.equals("character"))
		{
			session.setAttribute("process","character");

		System.out.println("if blockkkk");
		character.calculate(vector);
		status=character.injection;
		type=character.typeofinjection;
		System.out.println("Type of injection  "+type);
		//session.setAttribute("typeofinje", type);
	    request.setAttribute("typeofinje", type);
	    System.out.println("result value  if" +status);

		 if(status.equals("sucess"))
	    {
	    	DataBase.database data=new DataBase.database();
	    	// data.check();
	    	    	System.out.println("22222222222222222222");
	    	     	data.setTableName("login");
	    	     result=data.check(accNumber, password);
	    		System.out.println("result befor to redirect  "  +result);
	    }
		}

		else if(process.equals("syntax"))
		{

			session.setAttribute("process","syntax");
		 DataBase.databasesyntax datasyn = new DataBase.databasesyntax();

		 datasyn.setCheckquery("login", accNumber, password);

		 String query=datasyn.getCheckquery();
		  System.out.println("  sdsasfsdfsdfdfdf " +query);
		 WASP.SyntaxAware syntax=new WASP.SyntaxAware();
		 syntax.setsyntaxselect(query);
		 type=syntax.typeofinjection;
		 request.setAttribute("typeofinje",type);

         String tablename=syntax.getTablename();


        String accountnumber=syntax.getAccountnumber();
        System.out.println("accountnumber   " +accountnumber);
        int flength=accountnumber.length();
        int hlength=accountnumber.indexOf("=");
        accountnumber=accountnumber.substring(hlength+1, flength);
        System.out.println("accountnumber   " +accountnumber);
        String pass=syntax.getPassword();
         flength=pass.length();
        hlength=pass.indexOf("=");
        pass=pass.substring(hlength+1, flength);
        System.out.println("password   " +pass);

        System.out.println("type found in syntaa ======" +type);
        session.setAttribute("typeofinjection", type);
        query="select * from "+tablename+ " where accountnumber='"+accountnumber+"' AND password='"+pass+"'";
       System.out.println(query);
       datasyn.setCheck(query);
        result=datasyn.getCheck();




		}

		System.out.println("result befor to redirect  "  +result);
		return mapping.findForward(result);
	}
}