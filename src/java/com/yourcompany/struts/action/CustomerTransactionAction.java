/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.yourcompany.struts.action;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.*;



import java.util.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.yourcompany.struts.form.CustomerTransactionForm;

/**
 * MyEclipse Struts
 * Creation date: 07-29-2008
 *
 * XDoclet definition:
 * @struts.action path="/CustomerTransaction" name="customerTransactionForm" attribute="CustomerTransactionForm" input="/CustomerTransaction.jsp" scope="request" validate="true"
 */
public class CustomerTransactionAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException, ClassNotFoundException, IOException, InterruptedException {
		java.util.Date date=new java.util.Date();
		String type="";
		HttpSession session=request.getSession();
		Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
		Connection con=DriverManager.getConnection("jdbc:odbc:injection","sa","sa");
		Statement st=con.createStatement();
		System.out.println("Today date "+ date);
		CustomerTransactionForm CustomerTransactionForm = (CustomerTransactionForm) form;// TODO Auto-generated method stub
		String name=CustomerTransactionForm.getName().trim();
		String accnumber=CustomerTransactionForm.getAccnumber().trim();
		String trannumber=CustomerTransactionForm.getTrannumber().trim();
		String amounthaving=CustomerTransactionForm.getAmounthaving().trim();
		String amount=CustomerTransactionForm.getAmount().trim();
		String tablename="";
		Process compile;
		String process=(String)session.getAttribute("process");
		String accountnumber=(String)session.getAttribute("accountnumber");

		Vector v=new Vector();
		v.add(name);
		v.add(accnumber);
		v.add(trannumber);
		v.add(amount);
		v.add(date);

		String result="failure";
		String status="failure";
		if(process.equals("normal"))
		{
		DataBase.database data=new DataBase.database();

	    String query="insert into transactiondetails values('"+name+"',"+accnumber+",'','','"+date+"')";
		System.out.println(query);
	    data.setTarninsert(query);
	    String s="select * from transactiondetails where accountnumber='"+accnumber+"' AND dataofttansaction='"+date+"'";
	    System.out.println(s);
	    ResultSet rs=st.executeQuery("select * from transactiondetails where accountnumber='"+accnumber+"' AND dataofttansaction='"+date+"'");

	    String a="";
		String d="";
		if(rs.next())
		 {
			a=rs.getString(2).trim();

			d=rs.getString(5).trim();
		 }
		if((a.equals(accnumber))&& (d.equals(date.toString())))
		{

			query="update transactiondetails set tranaccountnumber="+trannumber+",amount="+amount+" where accountnumber="+accnumber+" AND dataofttansaction='"+date+"'";
			System.out.println(query);
			data.setTarninsert(query);
		}
		else
		{
			System.out.println("elseeeeeeeeeeeeee"+ d.length() + " fdsdfsds " +a);
			System.out.println(date+"   dsddddddf " +accnumber);
		}
	    result=data.getTarninsert();
		}


		else if(process.equals("positive"))
		{
			String file="C:\\WASP\\";


		    FileReader fr=new FileReader(file+"Metastringtrans.java");
		    System.out.println("file reader");
		    BufferedReader br=new BufferedReader(fr);
		    System.out.println("buffer reader");

		    String data1="";
		    String s;
		    while((s=br.readLine())!=null)
		    {

		    	s=s.replace("111", trannumber);
		    	s=s.replace("000",amount);
		    	data1=data1+"\n"+s;
		    	//System.out.println("correct classs   " +s);
		    }
		     System.out.println("classs "+data1);
		     br.close();
		     FileWriter fw=new FileWriter(file+"Metastringtrans.java");
		     fw.write(data1);
		     fw.flush();
		     fw.close();

		    String JAVA_HOME = System.getProperty("java.home");
		 	String java_dir	= JAVA_HOME.substring(0,JAVA_HOME.lastIndexOf(File.separator));
		 	String compileCommand = java_dir+File.separator+"bin"+File.separator+"javac.exe ";
		 	String path="-d "+" "+file;

		 	String fullpath=file+"Metastringtrans.java";
		 	System.out.println(compileCommand +" "+path+"\\"+" "+fullpath);

		 	compile = Runtime.getRuntime().exec(compileCommand +" "+path+"\\"+" "+fullpath);
		    System.out.println("comple class created");
		   Thread.sleep(5000);
		    WASP.PositiveTaint positive=new WASP.PositiveTaint();
		    positive.classcodetrans();
		    positive.changeclass("sampletrans.txt","Metastringtrans");
		    request.setAttribute("typeofinje", type);
		    if(positive.result.equals("notinjected"))
		    {
		    	  DataBase.database data=new DataBase.database();
		    	   data.setTableName("transactiondetails");
		           data.setInsert(v);

				     result=data.getInsert();
				    System.out.println(result);
		    }
		    else if(positive.result.equals("injected"))
		    {
		    	result="failure";
		    }
		}


		else if(process.equals("character"))
		{
			WASP.CharacterLevel character=new WASP.CharacterLevel();
			DataBase.database data=new DataBase.database();
			System.out.println("if blockkkk");
			Vector v1=new Vector();
			v1.add(name);
			v1.add(accnumber);
			v1.add(trannumber);
			v1.add(amount);
			character.calculate(v1);
			 request.setAttribute("typeofinje", type);
			status=character.injection;
		    System.out.println("result value  if" +status);
		    type=character.typeofinjection;
		   // session.setAttribute("typeofinje", type);

		    System.out.println("sdfdfdfddf"+type);

			 if(status.equals("sucess"))
		    {
				    data.setTableName("transactiondetails");
		            data.setInsert(v);

				     result=data.getInsert();
				    System.out.println(result);
		    }
			 else
			 {
				 result="failure";
			 }
		}
		else if(process.equals("syntax"))
		{
			DataBase.databasesyntax datasyntax=new DataBase.databasesyntax();
			datasyntax.setTransaction(accountnumber, amount, trannumber,"transactiondetails");
			String query=datasyntax.getTransaction();
			System.out.println("tavnnndhjd   " +query);
			WASP.SyntaxAware syntax=new WASP.SyntaxAware();
			syntax.function(query,"insert");
			syntax.setTransaction();
			tablename=syntax.getTablename();
			amount=syntax.getAmount();
			trannumber=syntax.getAccountnumber();
			System.out.println("amount   " +amount);
			System.out.println("accountnumber   " +accountnumber);
			String runquery= runquery="insert into "+tablename+" values('"+name+"',"+accountnumber+","+trannumber+","+amount+",'"+date+"')";;
			double bamount=Double.parseDouble(amounthaving);
			double pamount=Double.parseDouble(amount);
			if(bamount>=pamount)
			{

				 runquery="insert into "+tablename+" values('"+name+"',"+accountnumber+","+trannumber+","+amount+",'"+date+"')";
				System.out.println("final " +runquery);
				datasyntax.setRunquery(runquery);
				result=datasyntax.getRunquery();
			}
			else if(bamount<pamount)
			{
				System.out.println("final " +runquery);
				result="failure";
			}

		}
		return mapping.findForward(result);
	}
}